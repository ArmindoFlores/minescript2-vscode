{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "MineScript2",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#command"
		},
		{
			"include": "#struct"
		},
		{
			"include": "#types"
		},
		{
			"include": "#statements"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#expressions"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#literals"
		}
	],
	"repository": {
		"statements": {
			"patterns": [
				{
					"name": "keyword.control.minescript",
					"match": "\\b(if|else|for|while|extern|include|return|break|continue)\\b"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"name": "keyword.operator.minescript",
					"match": "(\\+\\+|--|==|!=|<=|>=|&&|\\|\\||[<>+\\-*/%^=!])"
				},
				{
					"name": "punctuation.separator.minescript",
					"match": "[,;.:]"
				},
				{
					"name": "punctuation.brackets.minescript",
					"match": "[(){}\\[\\]]"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.builtin.typescript",
					"match": "\\b(bool|float|int|string|void)(\\[\\])*\\b"
				},
				{
					"name": "support.type.minescript",
					"match": "\\b\\s*[A-Za-z_][A-Za-z0-9_]*(\\[\\])*(?=\\s+\\w+\\s*(=|\\+=|-=|\\*=|/=|,|\\)|;|\\{))"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.other.minescript",
					"match": "\\b(extern)\\b"
				}
			]
		},
		"struct": {
			"patterns": [
				{
					"name": "keyword.other.minescript",
					"match": "\\b(struct)\\s+([a-zA-Z_][a-zA-Z_0-9]*)(<\\s*[a-zA-Z_][a-zA-Z_0-9]*\\s*(,\\s*[a-zA-Z_][a-zA-Z_0-9]*)*\\s*>)?(?=\\s*{)",
					"captures": {
						"1": {
							"name": "keyword.other.minescript"
						},
						"2": {
							"name": "support.type.minescript"
						},
						"3": {
							"name": "entity.name.type.minescript"
						}
					}
				}
			]
		},
		"command": {
			"patterns": [
				{
					"begin": "@command\\s*\\(",
					"beginCaptures": {
						"0": {
							"name": "keyword.other.command.minescript"
						}
					},
					"end": "\\)",
					"patterns": [
						{
							"include": "source.mcfunction"
						}
					]
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "constant.numeric.minescript",
					"match": "\\b-?\\d*\\.\\d+|-?\\d+\\b"
				},
				{
					"name": "constant.language.boolean.minescript",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "string.quoted.double.minescript",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.minescript",
							"match": "\\\\\""
						}
					]
				},
				{
					"name": "variable.other.property.minescript",
					"match": "\\b[A-Za-z_][A-Za-z0-9_]*(?=\\s*\\:)"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "entity.name.function.minescript",
					"match": "\\b([A-Za-z_][A-Za-z0-9_]*(?:\\[\\])*)\\s+([A-Za-z_][A-Za-z0-9_]*)(<\\s*[a-zA-Z_][a-zA-Z_0-9]*\\s*(,\\s*[a-zA-Z_][a-zA-Z_0-9]*)*\\s*>)?(?=\\s*\\()",
					"captures": {
						"1": {
							"name": "support.type.return.minescript"
						},
						"2": {
							"name": "entity.name.function.minescript"
						},
						"3": {
							"name": "entity.name.type.minescript"
						}
					}
				},
				{
					"name": "meta.function-call.minescript",
					"match": "\\b([A-Za-z_][A-Za-z0-9_]*)(<\\s*[a-zA-Z_][a-zA-Z_0-9]*\\s*(,\\s*[a-zA-Z_][a-zA-Z_0-9]*)*\\s*>)?(?=\\s*\\()",
					"captures": {
						"1": {
							"name": "entity.name.function.minescript"
						},
						"2": {
							"name": "entity.name.type.minescript"
						}
					}
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.minescript",
					"match": "//.*$"
				},
				{
					"name": "comment.block.minescript",
					"begin": "/\\*",
					"end": "\\*/",
					"patterns": [
						{
							"match": "\\*/",
							"name": "comment.block.minescript"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.minescript"
}